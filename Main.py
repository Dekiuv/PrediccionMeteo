import streamlit as st
import plotly.express as px
import Entrenamiento as ent

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Simulador Meteorol√≥gico - G3",  # T√≠tulo de la p√°gina (en la pesta√±a del navegador)
    page_icon="üå§Ô∏è",  # Icono de la p√°gina (puedes usar emojis o una imagen)
    layout="wide"  # Puedes poner 'centered' para centrar todo el contenido
)

def main():
    st.title("Simulador Meteorol√≥gico")
    st.write("Aplicaci√≥n para realizar predicciones meteorol√≥gicas utilizando un modelo entrenado.")

    db_path = "CSV/Prediccion.db"
    simulador = ent.SimuladorMeteorologico(db_path)
    df = simulador.cargar_datos()

    # Selecci√≥n de la estaci√≥n
    estaciones = ['General', 'Oto√±o', 'Invierno', 'Primavera', 'Verano']
    estacion_seleccionada = st.selectbox("Selecciona la estaci√≥n del a√±o", estaciones)

    # Solicitar al usuario el n√∫mero de d√≠as que desea predecir
    dias = st.number_input("N√∫mero de d√≠as a predecir (Minimo 1 dia, Maximo 30 dias)", min_value=1, value=7, max_value=30)

    # Filtrar los datos seg√∫n la estaci√≥n seleccionada
    if estacion_seleccionada == 'General':
        df_estacion = df  # Sin filtro, mostrar todos los datos
    elif estacion_seleccionada == 'Oto√±o':
        df_estacion = df[df['estacion'] == 'Oto√±o']
    elif estacion_seleccionada == 'Invierno':
        df_estacion = df[df['estacion'] == 'Invierno']
    elif estacion_seleccionada == 'Primavera':
        df_estacion = df[df['estacion'] == 'Primavera']
    elif estacion_seleccionada == 'Verano':
        df_estacion = df[df['estacion'] == 'Verano']

    col1, col2 = st.columns(2)
    # Mostrar los datos cargados en la columna izquierda
    with col1:
        st.subheader(f"Datos cargados para la estaci√≥n: {estacion_seleccionada}")
        st.dataframe(df_estacion)
        if st.button("Realizar predicci√≥n"):
            with st.spinner('Cargando las predicciones...'):
                    # Preprocesar los datos de la estaci√≥n seleccionada
                    df_procesado = simulador.procesar_datos(df_estacion)
                    feature_columns = ["temp_min", "humidity", "pressure", "solar_radiation", "precipitation", "cloudiness", "temp_range"]
                    target_columns = ["temp_min", "temp_max", "precipitation", "weather", "cloudiness"]
                    y_pred, y_pred_limited, mae, mse = simulador.entrenar_y_predecir(df_procesado, feature_columns, target_columns, dias)
            # Desplegable para mostrar la Informaci√≥n de la predicci√≥n
            with st.expander("Informaci√≥n predicci√≥n"):
                    st.subheader("Resultados de la predicci√≥n")
                    st.write(f"MAE en prueba: {mae:.2f}")
                    st.write(f"MSE en prueba: {mse:.2f}")

                # Desplegable para mostrar la Predicci√≥n

            with col2:
                    # Representaci√≥n gr√°fica de los d√≠as seleccionados
                    st.subheader("Predicci√≥n Gr√°fica")
                    fig = px.line(y_pred_limited, x=y_pred_limited.index, y=["temp_min", "temp_max", "precipitation"],
                                title="Predicci√≥n de Temperatura y Precipitaci√≥n",
                                labels={'index': 'D√≠as', 'value': 'Valores: ¬∞C / mm'})
                    fig.update_xaxes(tickvals=y_pred_limited.index, ticktext=[f'Dia{i+1}' for i in range(dias)])
                    st.plotly_chart(fig)
                    with st.expander("Predicciones"):
                        # Mostrar las predicciones con temperatura m√≠nima, m√°xima, precipitaci√≥n y condiciones
                        st.subheader("Predicciones con temperatura m√≠nima, m√°xima, precipitaci√≥n, condiciones y nubosidad")
                        for index, row in y_pred_limited.iterrows():
                            st.write(f"Dia{index+1} | Temp M√≠n: {row['temp_min']:.2f}¬∞C | Temp M√°x: {row['temp_max']:.2f}¬∞C | Precipitaci√≥n: {row['precipitation']:.2f}mm | Condici√≥n: {row['weather']} | Nubosidad: {row['cloudiness']}")
                        # **Guardar todas las predicciones en un archivo CSV**
                        csv = y_pred.to_csv(index=False)  # Guardamos todas las predicciones (no limitadas)
                        st.download_button(
                            label="Descargar todas las predicciones como CSV",
                            data=csv,
                            file_name=f"Predicciones_{estacion_seleccionada}.csv",
                            mime="text/csv"
                            )
if __name__ == "__main__":
    main()
